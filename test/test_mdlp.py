import numpy as np

from discretization import MDLP
from _mdlp import slice_entropy, find_cut


def test_slice_entropy():

    y = np.array([0, 0, 0, 1, 1, 0, 1, 3, 1, 1])

    entropy1, k1 = slice_entropy(y, 0, 3)
    entropy2, k2 = slice_entropy(y, 3, 10)

    assert k1 == 1
    assert entropy1 == 0

    assert k2 == 3
    assert abs(entropy2 - 0.796311640173813) < 1e-6  # almost equal because floats

def test_find_cut():
    y = np.array([0, 0, 0, 0, 1, 0, 1, 1])
    k = find_cut(y, 0, len(y))
    assert k == 4

def test_find_cut_no_cut():
    y = np.array([0, 0, 0, 0])
    k = find_cut(y, 0, len(y))
    assert k == -1

def test_mdlp_iris():
    from sklearn.datasets import load_iris

    iris = load_iris()
    X = iris.data
    y = iris.target
    mdlp = MDLP(shuffle=False)
    transformed = mdlp.fit_transform(X, y)

    expected = [[ 0., 1., 0., 0.],
        [ 0.,  0.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  0.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.],
        [ 1.,  1.,  0.,  0.],
        [ 1.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 1.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  0.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  0.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  0.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  0.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 0.,  1.,  0.,  0.],
        [ 2.,  1.,  1.,  1.],
        [ 2.,  1.,  1.,  1.],
        [ 2.,  1.,  1.,  1.],
        [ 0.,  0.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 1.,  0.,  1.,  1.],
        [ 2.,  1.,  1.,  1.],
        [ 0.,  0.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 0.,  0.,  1.,  1.],
        [ 0.,  0.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 1.,  0.,  1.,  1.],
        [ 2.,  1.,  1.,  1.],
        [ 1.,  0.,  1.,  1.],
        [ 1.,  0.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 1.,  0.,  1.,  1.],
        [ 2.,  1.,  1.,  2.],
        [ 2.,  0.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 2.,  0.,  2.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 1.,  0.,  1.,  1.],
        [ 0.,  0.,  1.,  1.],
        [ 0.,  0.,  1.,  1.],
        [ 1.,  0.,  1.,  1.],
        [ 2.,  0.,  2.,  1.],
        [ 0.,  0.,  1.,  1.],
        [ 2.,  1.,  1.,  1.],
        [ 2.,  1.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 1.,  0.,  1.,  1.],
        [ 0.,  0.,  1.,  1.],
        [ 0.,  0.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 1.,  0.,  1.,  1.],
        [ 0.,  0.,  1.,  1.],
        [ 1.,  0.,  1.,  1.],
        [ 1.,  0.,  1.,  1.],
        [ 1.,  0.,  1.,  1.],
        [ 2.,  0.,  1.,  1.],
        [ 0.,  0.,  1.,  1.],
        [ 1.,  0.,  1.,  1.],
        [ 2.,  1.,  2.,  2.],
        [ 1.,  0.,  2.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 0.,  0.,  1.,  1.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 1.,  0.,  2.,  2.],
        [ 1.,  0.,  2.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  0.,  2.,  1.],
        [ 2.,  1.,  2.,  2.],
        [ 1.,  0.,  1.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  0.,  1.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  0.,  1.,  2.],
        [ 2.,  0.,  1.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  0.,  2.,  1.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  0.,  2.,  1.],
        [ 2.,  0.,  2.,  1.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  0.,  1.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 1.,  0.,  2.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  0.,  2.,  2.],
        [ 2.,  1.,  2.,  2.],
        [ 2.,  0.,  2.,  2.]]

    assert (transformed == expected).all()
